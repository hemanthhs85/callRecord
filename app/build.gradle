apply plugin: 'com.android.application'
apply plugin: 'com.github.axet.dxplugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.qspiders.callrecord"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 219
        versionName "1.7.13"
        multiDexEnabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            storeFile file(prop('RELEASE_STORE_FILE') ?: 'none')
            storePassword prop('RELEASE_STORE_PASSWORD')
            keyAlias prop('RELEASE_KEY_ALIAS')
            keyPassword prop('RELEASE_KEY_PASSWORD')
        }
    }
    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled false
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFileName = org.apache.commons.io.FilenameUtils.getExtension(android.defaultConfig.applicationId) + "-" + (output.getFilter(com.android.build.OutputFile.ABI) ?: "universal") + "-" + android.defaultConfig.versionName + "-" + variant.buildType.name + ".apk"
        }
    }
    bundle {
        abi {
            enableSplit = true
        }
    }
    splits {
        abi {
            enable false
            universalApk true
        }
    }
    dexOptions {
        javaMaxHeapSize = "4G"
    }
}

def surveys = project.file('src/main/res/raw/surveys.csv')

task fetch() {
    def url = 'https://docs.google.com/spreadsheets/d/1C6HuLIk3k4SmAYEuKOnQynGEPM39rjlu90oX7bYbqLk/gviz/tq?gid=1685986704&tqx=out:csv'
    if (!surveys.exists())
        new URL(url).withInputStream { i -> surveys.withOutputStream { it << i } }
}

clean.doLast {
    surveys.delete()
}

preBuild.dependsOn fetch
def lifeCycleExtensionsVersion='1.1.1'

def daggerVersion='2.13'
def glideVersion='4.8.0'
def mockitoVersion='2.11.0'
def rxJavaVersion="2.1.0"
dependencies {
    implementation 'com.github.axet:android-audio-library:1.0.174' // implementation project(':android-audio-library')
    implementation "org.apache.commons:commons-csv:1.5"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    assets('com.google.android.exoplayer:exoplayer:2.7.3') { exclude group: 'com.android.support' }
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.work:work-runtime:2.0.1'
    implementation 'androidx.work:work-runtime-ktx:2.0.1'
    implementation 'androidx.work:work-rxjava2:2.0.1'
    androidTestImplementation 'androidx.work:work-testing:2.0.1'
    implementation 'androidx.room:room-runtime:2.0.0'
    implementation 'androidx.room:room-rxjava2:2.0.0'
    kapt 'androidx.room:room-compiler:2.0.0'
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.72"


    //rxjava
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxJavaVersion"

    //dagger
    implementation"com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"


    implementation"android.arch.lifecycle:extensions:$lifeCycleExtensionsVersion"

    //mockito for testing
    implementation"org.mockito:mockito-inline:$mockitoVersion"

    implementation"com.github.bumptech.glide:glide:$glideVersion"



}
